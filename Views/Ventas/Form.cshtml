@model Javo2.ViewModels.Operaciones.Ventas.VentaFormViewModel

@{
    ViewData["Title"] = Model.VentaID == 0 ? "Crear Venta" : "Editar Venta";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>@ViewData["Title"]</h2>

<div class="card p-4">
    <form asp-action="@(Model.VentaID == 0 ? "Create" : "Edit")"
          method="post"
          id="ventaForm">
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(m => m.VentaID)

        <!-- ===== DATOS DE LA VENTA ===== -->
        <fieldset class="mb-4">
            <legend>Datos de la Venta</legend>
            <div class="row g-3">
                <div class="col-md-6">
                    <label asp-for="FechaVenta" class="form-label">Fecha</label>
                    <input asp-for="FechaVenta" type="date" class="form-control" />
                    <span asp-validation-for="FechaVenta" class="text-danger"></span>
                </div>
                <div class="col-md-6">
                    <label asp-for="NumeroFactura" class="form-label">Factura</label>
                    <input asp-for="NumeroFactura" class="form-control" readonly />
                    <span asp-validation-for="NumeroFactura" class="text-danger"></span>
                </div>
            </div>
        </fieldset>

        <!-- ===== DATOS DEL CLIENTE ===== -->
        <fieldset class="mb-4">
            <legend>Datos del Cliente</legend>
            <div class="row g-3 align-items-end">
                <div class="col-md-4">
                    <label asp-for="DniCliente" class="form-label">DNI del Cliente</label>
                    <!-- Botón type="button" para no recargar el form -->
                    <input type="text" id="DniCliente" class="form-control" placeholder="12345678" />
                </div>
                <div class="col-md-2">
                    <button type="button" id="buscarCliente" class="btn btn-primary w-100">
                        <i class="bi bi-search"></i> Buscar
                    </button>
                </div>
                <div class="col-md-6">
                    <label asp-for="NombreCliente" class="form-label">Nombre / Razón Social</label>
                    <input asp-for="NombreCliente" class="form-control" readonly />
                    <span asp-validation-for="NombreCliente" class="text-danger"></span>
                </div>
            </div>
            <div class="row g-3 mt-3">
                <div class="col-md-4">
                    <label asp-for="TelefonoCliente" class="form-label">Teléfono</label>
                    <input asp-for="TelefonoCliente" class="form-control" readonly />
                </div>
                <div class="col-md-4">
                    <label asp-for="DomicilioCliente" class="form-label">Domicilio</label>
                    <input asp-for="DomicilioCliente" class="form-control" readonly />
                </div>
                <div class="col-md-4">
                    <label asp-for="LocalidadCliente" class="form-label">Localidad</label>
                    <input asp-for="LocalidadCliente" class="form-control" readonly />
                </div>
                <div class="col-md-4">
                    <label asp-for="CelularCliente" class="form-label">Celular</label>
                    <input asp-for="CelularCliente" class="form-control" readonly />
                </div>
                <div class="col-md-4">
                    <label asp-for="LimiteCreditoCliente" class="form-label">Límite Crédito</label>
                    <input asp-for="LimiteCreditoCliente" class="form-control" readonly />
                </div>
                <div class="col-md-4">
                    <label asp-for="SaldoCliente" class="form-label">Saldo</label>
                    <input asp-for="SaldoCliente" class="form-control" readonly />
                </div>
                <div class="col-md-4">
                    <label asp-for="SaldoDisponibleCliente" class="form-label">Saldo Disponible</label>
                    <input asp-for="SaldoDisponibleCliente" class="form-control" readonly />
                </div>
            </div>
        </fieldset>

        <!-- ===== FORMA DE PAGO ===== -->
        <fieldset class="mb-4">
            <legend>Forma de Pago</legend>
            <div class="row g-3">
                <div class="col-md-6">
                    <label asp-for="FormaPagoID" class="form-label">Forma de Pago</label>
                    <select asp-for="FormaPagoID" class="form-select" asp-items="Model.FormasPago" id="FormaPagoID">
                        <option value="">-- Seleccione Forma de Pago --</option>
                    </select>
                    <span asp-validation-for="FormaPagoID" class="text-danger"></span>
                </div>
                <!-- BANCO -->
                <div id="bancoContainer" class="col-md-6 d-none">
                    <label asp-for="BancoID" class="form-label">Banco</label>
                    <select asp-for="BancoID" class="form-select" asp-items="Model.Bancos" id="BancoID">
                        <option value="">-- Seleccione Banco --</option>
                    </select>
                    <span asp-validation-for="BancoID" class="text-danger"></span>
                </div>
                <!-- TARJETA -->
                <div id="tipoTarjetaContainer" class="col-md-6 d-none">
                    <label asp-for="TipoTarjeta" class="form-label">Tipo de Tarjeta</label>
                    <select asp-for="TipoTarjeta" class="form-select" asp-items="Model.TipoTarjetaOptions" id="TipoTarjeta">
                        <option value="">-- Seleccione Tipo de Tarjeta --</option>
                    </select>
                    <span asp-validation-for="TipoTarjeta" class="text-danger"></span>
                </div>
                <div id="cuotasContainer" class="col-md-6 d-none">
                    <label asp-for="Cuotas" class="form-label">Cuotas</label>
                    <select asp-for="Cuotas" class="form-select" asp-items="Model.CuotasOptions" id="Cuotas">
                        <option value="">-- Seleccione Cuotas --</option>
                    </select>
                    <span asp-validation-for="Cuotas" class="text-danger"></span>
                </div>
                <!-- PAGO VIRTUAL -->
                <div id="entidadElectronicaContainer" class="col-md-6 d-none">
                    <label asp-for="EntidadElectronica" class="form-label">Entidad Electrónica</label>
                    <select asp-for="EntidadElectronica" class="form-select" asp-items="Model.EntidadesElectronicas" id="EntidadElectronica">
                        <option value="">-- Seleccione Entidad Electrónica --</option>
                    </select>
                    <span asp-validation-for="EntidadElectronica" class="text-danger"></span>
                </div>
                <!-- CRÉDITO PERSONAL -->
                <div id="planFinanciamientoContainer" class="col-md-6 d-none">
                    <label asp-for="PlanFinanciamiento" class="form-label">Plan de Financiamiento</label>
                    <select asp-for="PlanFinanciamiento" class="form-select" asp-items="Model.PlanesFinanciamiento" id="PlanFinanciamiento">
                        <option value="">-- Seleccione Plan de Financiamiento --</option>
                    </select>
                    <span asp-validation-for="PlanFinanciamiento" class="text-danger"></span>
                </div>
            </div>
        </fieldset>

        <!-- ===== ANTICIPO / CHEQUES ===== -->
        <fieldset class="mb-4">
            <legend>Anticipo</legend>
            <div class="row g-3">
                <div class="col-md-3">
                    <label asp-for="AdelantoDinero" class="form-label">Adelanto</label>
                    <input asp-for="AdelantoDinero" class="form-control" />
                    <span asp-validation-for="AdelantoDinero" class="text-danger"></span>
                </div>
                <div class="col-md-3">
                    <label asp-for="DineroContado" class="form-label">Dinero Contado</label>
                    <input asp-for="DineroContado" class="form-control" />
                    <span asp-validation-for="DineroContado" class="text-danger"></span>
                </div>
                <div class="col-md-3">
                    <label asp-for="MontoCheque" class="form-label">Monto Cheque</label>
                    <input asp-for="MontoCheque" class="form-control" />
                    <span asp-validation-for="MontoCheque" class="text-danger"></span>
                </div>
                <div class="col-md-3">
                    <label asp-for="NumeroCheque" class="form-label">N° Cheque</label>
                    <input asp-for="NumeroCheque" class="form-control" />
                    <span asp-validation-for="NumeroCheque" class="text-danger"></span>
                </div>
            </div>
        </fieldset>

        <!-- ===== CRÉDITO PERSONAL ===== -->
        <fieldset class="mb-4">
            <legend>Crédito Personal</legend>
            <div class="row g-3">
                <div class="col-md-6">
                    <label asp-for="Condiciones" class="form-label">Condiciones</label>
                    <textarea asp-for="Condiciones" class="form-control"></textarea>
                    <span asp-validation-for="Condiciones" class="text-danger"></span>
                </div>
                <div class="col-md-6">
                    <label asp-for="Credito" class="form-label">Crédito</label>
                    <input asp-for="Credito" type="number" class="form-control" min="0" step="0.01" />
                    <span asp-validation-for="Credito" class="text-danger"></span>
                </div>
            </div>
        </fieldset>

        <!-- ===== AGREGAR PRODUCTO ===== -->
        <fieldset class="mb-4">
            <legend>Agregar Producto</legend>
            <div class="row g-3">
                <div class="col-md-4">
                    <label for="codigoProducto" class="form-label">Código del Producto</label>
                    <input type="text" id="codigoProducto" class="form-control" placeholder="P001..." />
                </div>
                <div class="col-md-2 align-self-end">
                    <button type="button" class="btn btn-primary w-100" id="buscarProducto">
                        <i class="bi bi-search"></i> Buscar
                    </button>
                </div>
                <div class="col-md-4">
                    <label for="nombreProducto" class="form-label">Nombre del Producto</label>
                    <input type="text" id="nombreProducto" class="form-control" />
                </div>
                <div class="col-md-2 align-self-end">
                    <button type="button" class="btn btn-primary w-100" id="buscarProductoPorNombre">
                        <i class="bi bi-search"></i> Buscar
                    </button>
                </div>
                <div class="col-md-4">
                    <label for="rubroProducto" class="form-label">Rubro</label>
                    <input type="text" id="rubroProducto" class="form-control" />
                </div>
                <div class="col-md-2 align-self-end">
                    <button type="button" class="btn btn-primary w-100" id="buscarProductoPorRubro">
                        <i class="bi bi-search"></i> Buscar
                    </button>
                </div>
                <div class="col-md-2 align-self-end">
                    <button type="button" class="btn btn-success w-100" id="agregarProducto">
                        <i class="bi bi-plus-circle"></i> Agregar
                    </button>
                </div>
            </div>
        </fieldset>

        <!-- ===== TABLA DE PRODUCTOS ===== -->
        <fieldset class="mb-4">
            <legend>Detalles del Presupuesto</legend>
            <div class="table-responsive">
                <table class="table table-striped table-bordered" id="productosTable">
                    <thead class="table-dark">
                        <tr>
                            <th>Código</th>
                            <th>Código Alfa</th>
                            <th>Detalle</th>
                            <th>Cantidad</th>
                            <th>Precio Unitario</th>
                            <th>Subtotal</th>
                            <th>Marca</th>
                            <th>Precio Lista</th>
                            <th>Precio Total</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = 0; i < Model.ProductosPresupuesto.Count; i++)
                        {
                            var p = Model.ProductosPresupuesto[i];
                            <tr>
                                <td>
                                    @Html.HiddenFor(m => m.ProductosPresupuesto[i].CodigoBarra)
                                    @Model.ProductosPresupuesto[i].CodigoBarra
                                </td>
                                <td>
                                    @Html.HiddenFor(m => m.ProductosPresupuesto[i].CodigoAlfa)
                                    @Model.ProductosPresupuesto[i].CodigoAlfa
                                </td>
                                <td>
                                    @Html.HiddenFor(m => m.ProductosPresupuesto[i].NombreProducto)
                                    @Model.ProductosPresupuesto[i].NombreProducto
                                </td>
                                <td>
                                    @Html.HiddenFor(m => m.ProductosPresupuesto[i].ProductoID)
                                    @Html.EditorFor(m => m.ProductosPresupuesto[i].Cantidad,
                                        new { htmlAttributes = new { @class = "form-control cantidad", min = "1" } })
                                    @Html.ValidationMessageFor(m => m.ProductosPresupuesto[i].Cantidad, "", new { @class = "text-danger" })
                                </td>
                                <td>
                                    @Html.HiddenFor(m => m.ProductosPresupuesto[i].PrecioUnitario)
                                    <input type="text" class="form-control precio" value="@p.PrecioUnitario.ToString("F2")" readonly />
                                    @Html.ValidationMessageFor(m => m.ProductosPresupuesto[i].PrecioUnitario, "", new { @class = "text-danger" })
                                </td>
                                <td>
                                    <input type="text" class="form-control subtotal"
                                           value="@(p.Cantidad * p.PrecioUnitario).ToString("F2")" readonly />
                                </td>
                                <td>
                                    @Html.HiddenFor(m => m.ProductosPresupuesto[i].Marca)
                                    @Model.ProductosPresupuesto[i].Marca
                                </td>
                                <td>
                                    @Html.HiddenFor(m => m.ProductosPresupuesto[i].PrecioLista)
                                    @p.PrecioLista.ToString("F2")
                                </td>
                                <td>
                                    @Html.HiddenFor(m => m.ProductosPresupuesto[i].PrecioTotal)
                                    @(p.Cantidad * p.PrecioLista).ToString("F2")
                                </td>
                                <td>
                                    <button type="button" class="btn btn-danger btn-sm eliminar-producto">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </fieldset>

        <!-- Totales -->
        <div class="text-end mb-4">
            <h4 class="mb-0">
                Total de Productos:
                <span id="totalProductos">@Model.TotalProductos</span>
            </h4>
            <h4 class="mb-0">
                Precio Total:
                <input type="text" id="totalVenta"
                       name="PrecioTotal"
                       class="form-control d-inline-block w-auto"
                       value="@Model.PrecioTotal.ToString("F2")"
                       readonly />
            </h4>
        </div>

        <!-- Modal Seleccionar Productos -->
        <div class="modal fade"
             id="productosModal"
             tabindex="-1"
             aria-labelledby="productosModalLabel"
             aria-hidden="true">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="productosModalLabel">Seleccionar Producto</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
                    </div>
                    <div class="modal-body">
                        <ul class="list-group" id="productosList">
                            <!-- Se llena dinámicamente -->
                        </ul>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                            Cerrar
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Botones de Acción -->
        <div class="mb-4 text-end">
            <button type="submit"
                    class="btn btn-success"
                    name="Finalizar"
                    value="true"
                    id="btnFinalizarVenta">
                <i class="bi bi-cash-coin me-1"></i> Finalizar Venta
            </button>
            <a asp-action="Index" class="btn btn-secondary">
                <i class="bi bi-arrow-left me-1"></i> Cancelar
            </a>
        </div>
    </form>
</div>

@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")

    <script>
        // Al enviar el form
        $("#ventaForm").on("submit", function (e) {
            console.log("[VentasForm] SUBMIT => Se está intentando crear/editar la venta.");
            // Los posibles errores de ModelState vendrán del servidor en la respuesta.
        });

        function getCurrentTableData() {
            let data = [];
            $("#productosTable tbody tr").each(function () {
                let $row = $(this);
                let codBarra = $row.find("input[name*='CodigoBarra']").val() || "";
                let codAlfa = $row.find("input[name*='CodigoAlfa']").val() || "";
                let nomProd = $row.find("input[name*='NombreProducto']").val() || "";
                let cant = parseInt($row.find(".cantidad").val()) || 0;
                let pUnit = parseFloat($row.find(".precio").val()) || 0;
                let sub = parseFloat($row.find(".subtotal").val()) || 0;
                let marca = $row.find("input[name*='Marca']").val() || "";
                let pLista = parseFloat($row.find("input[name*='PrecioLista']").val()) || 0;
                let pTotal = parseFloat($row.find("input[name*='PrecioTotal']").val()) || 0;

                data.push({
                    codigoBarra: codBarra,
                    codigoAlfa: codAlfa,
                    nombreProducto: nomProd,
                    marca: marca,
                    cantidad: cant,
                    precioUnitario: pUnit,
                    subtotal: sub,
                    precioLista: pLista,
                    precioTotal: pTotal
                });
            });
            return data;
        }

        $(document).ready(function () {
            console.log("[VentasForm] Document ready. Script inicializado.");
            console.log("[VentasForm] Estado inicial de la tabla:", getCurrentTableData());

            // 1) buscarCliente
            $("#buscarCliente").click(function () {
                let dni = $("#DniCliente").val().trim();
                console.log("[VentasForm] Click => buscarCliente. DNI:", dni);

                if (!dni || isNaN(dni)) {
                    alert("Ingrese un DNI válido.");
                    return;
                }

                $.ajax({
                    url: '@Url.Action("BuscarClientePorDNI", "Ventas")',
                    type: 'POST',
                    data: { dni: dni },
                })
                .done(function (resp) {
                    console.log("[VentasForm] Resp buscarClientePorDNI:", resp);
                    if (resp.success) {
                        let c = resp.data;
                        $("#NombreCliente").val(c.nombre);
                        $("#TelefonoCliente").val(c.telefono);
                        $("#DomicilioCliente").val(c.calle);
                        $("#LocalidadCliente").val(c.localidad);
                        $("#CelularCliente").val(c.celular);
                        $("#LimiteCreditoCliente").val(parseFloat(c.limiteCredito).toFixed(2));
                        $("#SaldoCliente").val(parseFloat(c.saldo).toFixed(2));
                        $("#SaldoDisponibleCliente").val(parseFloat(c.saldoDisponible).toFixed(2));
                    } else {
                        alert(resp.message);
                        console.warn("[VentasForm] Cliente no encontrado:", resp.message);
                    }
                })
                .fail(function (err) {
                    console.error("[VentasForm] Error en buscarClientePorDNI =>", err);
                    alert("Error al buscar el cliente.");
                });
            });

            // 2) buscarProducto
            $("#buscarProducto").click(function () {
                let codigo = $("#codigoProducto").val().trim();
                console.log("[VentasForm] BuscarProducto, código:", codigo);

                if (!codigo) {
                    alert("Ingrese un código de producto válido.");
                    return;
                }

                $.post('@Url.Action("BuscarProducto", "Ventas")', { codigoProducto: codigo })
                 .done(function (resp) {
                     console.log("[VentasForm] Resp BuscarProducto:", resp);
                     if (resp.success) {
                         agregarProductoATabla(resp.data);
                     } else {
                         alert(resp.message);
                         console.warn("[VentasForm] Producto no encontrado:", resp.message);
                     }
                 })
                 .fail(function (err) {
                     console.error("[VentasForm] FAIL BuscarProducto =>", err);
                     alert("No se pudo buscar el producto.");
                 });
            });

            // 3) buscarProductoPorNombre
            $("#buscarProductoPorNombre").click(function () {
                let nombre = $("#nombreProducto").val().trim();
                console.log("[VentasForm] BuscarProductoPorNombre => nombre:", nombre);

                if (!nombre) {
                    alert("Ingrese un nombre de producto.");
                    return;
                }

                $.post('@Url.Action("BuscarProductoPorNombre", "Ventas")', { nombreProducto: nombre })
                 .done(function (resp) {
                     console.log("[VentasForm] Resp BuscarProductoPorNombre:", resp);
                     if (resp.success) {
                         mostrarProductosPopup(resp.data);
                     } else {
                         alert(resp.message);
                     }
                 })
                 .fail(function (err) {
                     console.error("[VentasForm] FAIL BuscarProductoPorNombre =>", err);
                     alert("Error al buscar producto por nombre.");
                 });
            });

            // 4) buscarProductoPorRubro
            $("#buscarProductoPorRubro").click(function () {
                let rubro = $("#rubroProducto").val().trim();
                console.log("[VentasForm] BuscarProductoPorRubro => rubro:", rubro);

                if (!rubro) {
                    alert("Ingrese un rubro válido.");
                    return;
                }

                $.post('@Url.Action("BuscarProductosPorRubro", "Ventas")', { rubroProducto: rubro })
                 .done(function (resp) {
                     console.log("[VentasForm] Resp BuscarProductosPorRubro:", resp);
                     if (resp.success) {
                         mostrarProductosPopup(resp.data);
                     } else {
                         alert(resp.message);
                     }
                 })
                 .fail(function (err) {
                     console.error("[VentasForm] FAIL BuscarProductosPorRubro =>", err);
                     alert("No se pudo buscar productos por rubro.");
                 });
            });

            // 5) AgregarProducto manual
            $("#agregarProducto").click(function () {
                console.log("[VentasForm] Click => agregarProducto manual");
                let prod = {
                    productoID: 0,
                    codigoBarra: "",
                    codigoAlfa: "",
                    nombreProducto: "",
                    marca: "",
                    precioUnitario: 0,
                    precioLista: 0,
                    cantidad: 1,
                    precioTotal: 0
                };
                agregarProductoATabla(prod);
            });

            // 6) Seleccionar-producto (modal)
            $(document).on("click", ".seleccionar-producto", function () {
                let p = $(this).data("producto");
                console.log("[VentasForm] Seleccionar-producto =>", p);
                agregarProductoATabla(p);
                $("#productosModal").modal("hide");
            });

            // 7) Eliminar-producto
            $(document).on("click", ".eliminar-producto", function () {
                console.log("[VentasForm] Eliminar producto =>", $(this).closest("tr"));
                $(this).closest("tr").remove();
                actualizarTotales();
                console.log("[VentasForm] Tabla tras eliminar:", getCurrentTableData());
            });

            // 8) Manejo de FormaPago => parseInt(...) || 0
            $("#FormaPagoID").change(function () {
                let fpID = parseInt($(this).val()) || 0;
                console.log("[VentasForm] FormaPagoID changed =>", fpID);

                $("#bancoContainer, #tipoTarjetaContainer, #cuotasContainer, #entidadElectronicaContainer, #planFinanciamientoContainer")
                    .addClass("d-none");

                if (fpID === 2) { // Tarjeta de crédito
                    $("#bancoContainer").removeClass("d-none");
                    $("#tipoTarjetaContainer").removeClass("d-none");
                    $("#cuotasContainer").removeClass("d-none");
                }
                else if (fpID === 5) { // Pago Virtual
                    $("#entidadElectronicaContainer").removeClass("d-none");
                }
                else if (fpID === 6) { // Crédito Personal
                    $("#planFinanciamientoContainer").removeClass("d-none");
                }
            }).trigger("change");

            // 9) Recalcular subtotales
            $(document).on("input", ".cantidad, .precio", function () {
                let row = $(this).closest("tr");
                let cant = parseInt(row.find(".cantidad").val()) || 0;
                let pu = parseFloat(row.find(".precio").val()) || 0;
                let sub = cant * pu;
                row.find(".subtotal").val(sub.toFixed(2));

                let pl = parseFloat(row.find("input[name*='PrecioLista']").val()) || 0;
                let total = cant * pl;
                row.find("input[name*='PrecioTotal']").val(total.toFixed(2));

                actualizarTotales();
            });

            console.log("[VentasForm] Script VentasForm listo.");
        });

        function agregarProductoATabla(prod) {
            console.log("[VentasForm] Agregar producto =>", prod);
            let index = $("#productosTable tbody tr").length;

            let newRow = `
                <tr>
                    <td>
                        <input type="hidden" name="ProductosPresupuesto[${index}].CodigoBarra" value="${prod.codigoBarra || ''}" />
                        ${prod.codigoBarra || ''}
                    </td>
                    <td>
                        <input type="hidden" name="ProductosPresupuesto[${index}].CodigoAlfa" value="${prod.codigoAlfa || ''}" />
                        ${prod.codigoAlfa || ''}
                    </td>
                    <td>
                        <input type="hidden" name="ProductosPresupuesto[${index}].NombreProducto" value="${prod.nombreProducto || ''}" />
                        ${prod.nombreProducto || ''}
                    </td>
                    <td>
                        <input type="hidden" name="ProductosPresupuesto[${index}].ProductoID" value="${prod.productoID || 0}" />
                        <input type="number" name="ProductosPresupuesto[${index}].Cantidad"
                               class="form-control cantidad" value="${prod.cantidad || 1}" min="1" />
                    </td>
                    <td>
                        <input type="hidden" name="ProductosPresupuesto[${index}].PrecioUnitario" value="${prod.precioUnitario || 0}" />
                        <input type="text" class="form-control precio"
                               value="${parseFloat(prod.precioUnitario||0).toFixed(2)}"
                               readonly />
                    </td>
                    <td>
                        <input type="text" class="form-control subtotal"
                               value="${((prod.cantidad||1)*(prod.precioUnitario||0)).toFixed(2)}"
                               readonly />
                    </td>
                    <td>
                        <input type="hidden" name="ProductosPresupuesto[${index}].Marca" value="${prod.marca || ''}" />
                        ${prod.marca || ''}
                    </td>
                    <td>
                        <input type="hidden" name="ProductosPresupuesto[${index}].PrecioLista" value="${prod.precioLista || 0}" />
                        ${parseFloat(prod.precioLista||0).toFixed(2)}
                    </td>
                    <td>
                        <input type="hidden" name="ProductosPresupuesto[${index}].PrecioTotal"
                               value="${(prod.cantidad*(prod.precioLista||0)).toFixed(2)}" />
                        ${(prod.cantidad*(prod.precioLista||0)).toFixed(2)}
                    </td>
                    <td>
                        <button type="button" class="btn btn-danger btn-sm eliminar-producto">
                            <i class="bi bi-trash"></i>
                        </button>
                    </td>
                </tr>
            `;
            $("#productosTable tbody").append(newRow);
            console.log("[VentasForm] Fila agregada. Nuevo estado:", getCurrentTableData());
            actualizarTotales();
        }

        function mostrarProductosPopup(productos) {
            console.log("[VentasForm] mostrarProductosPopup =>", productos);
            let $list = $("#productosList");
            $list.empty();

            productos.forEach(function (p) {
                let li = `
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <span>${p.nombreProducto || 'Sin Nombre'}</span>
                        <button type="button" class="btn btn-primary btn-sm seleccionar-producto"
                                data-producto='${JSON.stringify(p)}'>
                            Seleccionar
                        </button>
                    </li>
                `;
                $list.append(li);
            });

            let modalEl = document.getElementByID('productosModal');
            let modal = new bootstrap.Modal(modalEl);
            modal.show();
        }

        function actualizarTotales() {
            let total = 0;
            let totalProductos = 0;

            $("#productosTable tbody tr").each(function () {
                let sub = parseFloat($(this).find(".subtotal").val()) || 0;
                let cant = parseInt($(this).find(".cantidad").val()) || 0;
                total += sub;
                totalProductos += cant;
            });

            $("#totalVenta").val(total.toFixed(2));
            $("#totalProductos").text(totalProductos);

            console.log("[VentasForm] Totales recalculados => total:", total.toFixed(2), " / cantProductos:", totalProductos);
            console.log("[VentasForm] Estado final de la tabla:", getCurrentTableData());
        }
    </script>
}
