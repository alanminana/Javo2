// Reemplazar este archivo completamente
(function (n, t) { "use strict"; var i = n.App = n.App || {}; if (typeof i.debug !== "function") { i.debug = function (msg, data) { if (i.config && i.config.debug) { console.log(msg, data || ""); } } } i.debug = { enabled: !1, init: function (n) { this.enabled = n && n.enabled; this.enabled && (this.setupAjaxLogging(), this.logAntiForgeryToken(), console.log("Módulo de depuración inicializado")) }, setupAjaxLogging: function () { t(document).ajaxSend(function (n, t, i) { console.log("AJAX Request:", { url: i.url, type: i.type, data: i.data, headers: i.headers }) }); t(document).ajaxComplete(function (n, t, i) { console.log("AJAX Response:", { status: t.status, statusText: t.statusText, responseText: t.responseText, url: i.url }) }) }, logAntiForgeryToken: function () { t(document).ready(function () { const n = t('input[name="__RequestVerificationToken"]').val(); console.log("Anti-forgery token encontrado:", n ? "Sí" : "No", n) }) }, log: function (n, t) { this.enabled && (t ? console.log(`[DEBUG] ${n}`, t) : console.log(`[DEBUG] ${n}`)) }, error: function (n, t) { this.enabled && console.error(`[ERROR] ${n}`, t || "") } } })(window, jQuery), function (n) { "use strict"; var t = n.App = n.App || {}; t.permissions = { cache: {}, init: function () { this.setupPermissionElements() }, setupPermissionElements: function () { document.querySelectorAll("[data-require-permission]").forEach(function (n) { const i = n.getAttribute("data-require-permission"); t.permissions.hasPermission(i) || (n.style.display = "none") }); document.querySelectorAll("button[data-require-permission]").forEach(function (n) { const i = n.getAttribute("data-require-permission"); t.permissions.hasPermission(i) || (n.disabled = !0, n.classList.add("disabled")) }); document.querySelectorAll("[data-require-permission]").forEach(function (n) { const i = n.getAttribute("data-require-permission"); if (!t.permissions.hasPermission(i)) { const t = n.cloneNode(!0); n.parentNode.replaceChild(t, n) } }) }, hasPermission: function (n) { if (this.cache[n] !== undefined) return this.cache[n]; const t = document.getElementById("userPermissions"); if (t && t.dataset.permissions) try { const r = JSON.parse(t.dataset.permissions), i = r.includes(n); return this.cache[n] = i, i } catch (r) { console.error("Error al parsear permisos:", r) } const i = document.querySelector(`[data-permission-code="${n}"]`) !== null; return this.cache[n] = i, i } } }(window, jQuery), function (n, t) { "use strict"; var i = n.App = n.App || {}; i.tables = { init: function () { this.initDeleteButton(); this.initQuantityChange() }, initDeleteButton: function () { t(document).on("click", ".eliminar-producto, .remove-product", function () { const r = t(this).closest("tr"), u = r.closest("table"); r.remove(); const n = u.attr("id"); n && (i.tables.reindexRows(n), i.tables.updateTotals(n)) }) }, initQuantityChange: function () { t(document).on("change", ".cantidad", function () { const n = t(this).closest("tr"), f = n.closest("table"), e = parseInt(t(this).val()), o = parseFloat(n.find('input[name$=".PrecioUnitario"]').val()), r = e * o; n.find(".subtotal").text(i.format.currency(r)); n.find('input[name$=".PrecioTotal"]').val(r); const u = f.attr("id"); u && i.tables.updateTotals(u) }) }, reindexRows: function (n) { t(`#${n} tbody tr`).each(function (n) { t(this).attr("data-index", n); t(this).find("input").each(function () { const i = t(this).attr("name"); if (i && i.includes("[")) { const r = i.replace(/\[\d+\]/, `[${n}]`); t(this).attr("name", r) } }) }) }, updateTotals: function (n, r) { r = r || {}; let f = 0, u = 0; t(`#${n} tbody tr`).each(function () { const n = parseInt(t(this).find(".cantidad").val()) || 0, r = parseFloat(t(this).find('input[name$=".PrecioUnitario"]').val()) || 0, i = n * r; f += n; u += i; t(this).find('input[name$=".PrecioTotal"]').val(i) }); const e = r.totalProductsId || "totalProductos", o = r.totalAmountId || "totalVenta"; return t(`#${e}`).text(f), t(`#${o}`).text(i.format.currency(u)), r.hiddenTotalInput && t(r.hiddenTotalInput).val(u), { products: f, amount: u } }, initSelectAll: function (n, i) { t(document).on("change", n, function () { const n = t(this).prop("checked"); t(i).prop("checked", n); t(i).closest("tr").length && t(i).closest("tr").toggleClass("table-active", n) }); t(document).on("change", i, function () { const r = t(i).length === t(i + ":checked").length; t(n).prop("checked", r); t(this).closest("tr").toggleClass("table-active", this.checked) }) } } }(window, jQuery), function (n, t) {
    "use strict"; var i = n.App = n.App || {}; i.products = {
        init: function () { if (typeof i.debug === "function") { i.debug("Módulo de productos inicializado"); } else { console.log("Módulo de productos inicializado"); } }, searchByCode: function (n, r, u) { if (u = u || {}, !r) { if (u.onError) u.onError("Ingrese un código para buscar"); return } i.ajax.post(n, { codigoProducto: r }, function (n) { if (n.success) { const i = { id: n.data.productoID, codigoAlfa: n.data.codigoAlfa, codigoBarra: n.data.codigoBarra, nombre: n.data.nombreProducto, marca: n.data.marca, precio: n.data.precioUnitario, precioLista: n.data.precioLista }; if (u.nameField && t(u.nameField).val(i.nombre), u.priceField && t(u.priceField).val(i.precio), u.quantityField && (t(u.quantityField).val(1), t(u.quantityField).focus()), u.onSuccess) u.onSuccess(i) } else { if (u.modalErrorId) t(u.modalErrorId).modal("show"); else if (u.onError) u.onError("Producto no encontrado"); else i.notify.error("Producto no encontrado"); u.nameField && t(u.nameField).val(""); u.priceField && t(u.priceField).val(""); u.onNotFound && u.onNotFound() } }, function () { if (u.onError) u.onError("Error al buscar producto"); else i.notify.error("Error al buscar producto") }) }, addToTable: function (n, r, u, f) { if (f = f || {}, !r || !r.id) return i.notify.warning("Debe buscar un producto primero"), !1; const e = parseInt(u); if (isNaN(e) || e <= 0) return i.notify.warning("La cantidad debe ser mayor a cero"), !1; let o = !1, s = -1; t(`#${n} tbody tr`).each(function (n) { const i = t(this).find('input[name$=".ProductoID"]').val(); if (parseInt(i) === r.id) return o = !0, s = n, !1 }); const h = e * r.precio; if (o) { const u = t(`#${n} tbody tr`).eq(s), o = parseInt(u.find(".cantidad").val()), f = o + e; u.find(".cantidad").val(f); u.find(".subtotal").text(i.format.currency(f * r.precio)); u.find('input[name$=".PrecioTotal"]').val(f * r.precio) } else { const i = t(`#${n} tbody tr`).length, u = this.getProductRowTemplate(i, r, e, h); t(`#${n} tbody`).append(u) } return f.updateTotals && typeof f.updateTotals == "function" ? f.updateTotals() : f.autoUpdateTotals !== !1 && i.tables.updateTotals(n), f.resetFields && (f.codeField && t(f.codeField).val(""), f.nameField && t(f.nameField).val(""), f.priceField && t(f.priceField).val("")), !0 }, getProductRowTemplate: function (n, t, r, u) {
            return `
             <tr data-index="${n}">
                 <td>
                     <input type="hidden" name="ProductosPresupuesto[${n}].ProductoID" value="${t.id}" />
                     <input type="hidden" name="ProductosPresupuesto[${n}].CodigoAlfa" value="${t.codigoAlfa || ""}" />
                     <input type="hidden" name="ProductosPresupuesto[${n}].CodigoBarra" value="${t.codigoBarra || ""}" />
                     <input type="hidden" name="ProductosPresupuesto[${n}].Marca" value="${t.marca || ""}" />
                     <input type="hidden" name="ProductosPresupuesto[${n}].NombreProducto" value="${t.nombre}" />
                     <input type="hidden" name="ProductosPresupuesto[${n}].PrecioUnitario" value="${t.precio}" />
                     <input type="hidden" name="ProductosPresupuesto[${n}].PrecioTotal" value="${u}" />
                     <input type="hidden" name="ProductosPresupuesto[${n}].PrecioLista" value="${t.precioLista || 0}" />
                     ${t.codigoAlfa || t.codigoBarra || t.id}
                 </td>
                 <td>${t.nombre}</td>
                 <td><input type="number" name="ProductosPresupuesto[${n}].Cantidad" value="${r}" min="1" class="form-control form-control-sm bg-dark text-light cantidad" /></td>
                 <td>${i.format.currency(t.precio)}</td>
                 <td><span class="subtotal">${i.format.currency(u)}</span></td>
                 <td class="text-center">
                     <button type="button" class="btn btn-sm btn-outline-danger eliminar-producto">
                         <i class="bi bi-trash"></i>
                     </button>
                 </td>
             </tr>
         `}
    }
}(window, jQuery);